buildscript {
    repositories {
        maven {
            url MAVEN_URL
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
    }
}

repositories {
    mavenLocal()
    maven {
        url MAVEN_URL
    }
}
apply plugin: 'com.android.library'
apply plugin: 'maven'
//apply plugin: 'signing'
android {
    compileSdkVersion 21
    buildToolsVersion "23.0.1"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 21
        versionCode 1
        versionName "1.1.1"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        pickFirst 'META-INF/ASL2.0'
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/NOTICE'
    }
}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.guava:guava:' + GUAVA_VERSION
    compile 'org.codehaus.jackson:jackson-jaxrs:' + JACKSON_JAXRS_VERSION

    //Test dependencies:
    testCompile 'junit:junit:' + JUNIT_VERSION
    testCompile 'org.mockito:mockito-all:' + MOCKITO_VERSION
    testCompile 'org.robolectric:robolectric:' + ROBOLECTRIC_VERSION
}

task clearJar(type: Delete) {
    delete 'target/'+ project.name + '.jar'
    delete 'build/libs/'+ project.name + '.jar'
}


task clearTargetClasses(type: Delete){
    delete 'target/classes'
}
task cleanTestReports(type: Delete){
    delete SUREFIRE_REPORTS_DIR
}

task clearAARFromTarget(type: Delete){
    delete 'target/' + project.name + '.aar'
}

clean.dependsOn clearJar
clean.dependsOn clearTargetClasses
clean.dependsOn cleanTestReports
clean.dependsOn clearAARFromTarget

//By default, it puts the JAR in /build/libs.
task createJar(type: Jar) {
    from 'build/intermediates/classes/release/'
    archiveName project.name + '.jar'
    exclude '**/BuildConfig.*'
}

//task createJar(type: Jar){
//    from 'build/intermediates/classes/release/'
//    from {configurations.compile.collect{ it.isDirectory() ? it : zipTree(it)}}
//    exclude ('example/**', 'META-INF/**')
//
//}

task makeJar(type: Copy) {
    from 'build/libs'
    into 'target/'
    include project.name + '.jar'
}

makeJar.dependsOn clearJar
makeJar.dependsOn createJar

task copyTestReports(type: Copy){
    from 'build/test-results/release'
    into SUREFIRE_REPORTS_DIR
}

task copyAARToTarget(type: Copy){
    from 'build/outputs/aar/'
    into 'target/'
    include project.name + '-release.aar'
    rename { String fileName ->
        fileName = project.name + '.aar'
    }
}

makeJar.dependsOn copyAARToTarget


task generateJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs

    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/internal/**'
    exclude '**/org/apache/cordova/**'


    options.links 'http://docs.oracle.com/javase/7/docs/api/'

    options.encoding 'UTF-8'

    options.memberLevel = JavadocMemberLevel.PUBLIC

    setTitle 'JSONStore Native Android API'
}

task androidJavadocsJar(type: Jar, dependsOn: generateJavadoc) {
    classifier = 'javadoc'
    from generateJavadoc.destinationDir
}

artifacts {
    archives androidJavadocsJar
}


/* For signing
signing {
   required { isReleaseBuild() }
   sign configurations.archives
}*/

def getRepositoryUsername() {
    return hasProperty('ossrhUsername') ? ossrhUsername : ''
}

def getRepositoryPassword() {
    return hasProperty('ossrhPassword') ? ossrhPassword : ''
}

def getReleaseRepositoryUrl() {
    return 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def getSnapshotRepositoryUrl() {
    return 'https://oss.sonatype.org/content/repositories/snapshots/'
}

def isReleaseBuild() {
    return !getVersion().contains('-SNAPSHOT')
}

def getVersion() {
    return '1.1.1-SNAPSHOT'
}

uploadArchives {
    repositories {
        mavenDeployer {
            //   beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: getReleaseRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            snapshotRepository(url: getSnapshotRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            pom.groupId='com.ibm.mobilefirstplatform.clientsdk.android'
            pom.artifactId='jsonstore'
            pom.version = getVersion()

            pom.project {
                name 'JSONStore Native Android SDK'
                description 'JSONStore is a lightweight, document-oriented storage system that enables persistent storage of JSON documents for Android applications.'
                url 'https://github.com/ibm-bluemix-mobile-services/jsonstore-android'

                scm {
                    url 'https://github.com/ibm-bluemix-mobile-services/jsonstore-android'
                    connection 'scm:git:git@github.com/ibm-bluemix-mobile-services/jsonstore-android.git'
                    developerConnection 'scm:git:git@github.com/ibm-bluemix-mobile-services/jsonstore-android.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        name 'JSONStore Native Android SDK'
                        email 'mobilsdk@us.ibm.com'
                    }
                }
            }
        }
    }
}
